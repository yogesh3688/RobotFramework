<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.5 on win32)" generated="20200816 21:03:12.460" rpa="false">
<suite id="s1" name="DatabaseTest" source="F:\Workspace\Robot-Test\Tests\DatabaseTest.robot">
<test id="s1-t1" name="TC_01_CONNECT_DATABASE">
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${dbname}</arg>
<arg>${dbuser}</arg>
<arg>${dbpassword}</arg>
<arg>${dbhost}</arg>
<arg>${dbport}</arg>
</arguments>
<msg timestamp="20200816 21:03:12.508" level="INFO">Connecting using : pymysql.connect(db=bussiness, user=root, passwd=root, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20200816 21:03:12.493" endtime="20200816 21:03:12.516"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>customerinfo</arg>
</arguments>
<msg timestamp="20200816 21:03:12.516" level="INFO">Executing : Table Must Exist  |  customerinfo </msg>
<msg timestamp="20200816 21:03:12.516" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='customerinfo' </msg>
<status status="PASS" starttime="20200816 21:03:12.516" endtime="20200816 21:03:12.524"></status>
</kw>
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>Select * from customerinfo</arg>
</arguments>
<msg timestamp="20200816 21:03:12.525" level="INFO">Executing : Check If Exists In Database  |  Select * from customerinfo </msg>
<msg timestamp="20200816 21:03:12.525" level="INFO">Executing : Query  |  Select * from customerinfo </msg>
<status status="PASS" starttime="20200816 21:03:12.525" endtime="20200816 21:03:12.526"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>Select * from customerinfo</arg>
</arguments>
<assign>
<var>@{QueryResult}</var>
</assign>
<msg timestamp="20200816 21:03:12.526" level="INFO">Executing : Query  |  Select * from customerinfo </msg>
<msg timestamp="20200816 21:03:12.527" level="INFO">@{QueryResult} = [ ('Selenium', datetime.date(2020, 7, 26), 10, 'India') | ('Selenium', datetime.date(2020, 7, 26), 10, 'India') | ('Protactor', datetime.date(2020, 7, 26), 20, 'USA') | ('Appium', datetime.date(2020, ...</msg>
<status status="PASS" starttime="20200816 21:03:12.526" endtime="20200816 21:03:12.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>@{QueryResult}[0]</arg>
</arguments>
<msg timestamp="20200816 21:03:12.528" level="INFO">('Selenium', datetime.date(2020, 7, 26), 10, 'India')</msg>
<status status="PASS" starttime="20200816 21:03:12.528" endtime="20200816 21:03:12.528"></status>
</kw>
<status status="PASS" starttime="20200816 21:03:12.492" endtime="20200816 21:03:12.528" critical="yes"></status>
</test>
<status status="PASS" starttime="20200816 21:03:12.461" endtime="20200816 21:03:12.530"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="DatabaseTest">DatabaseTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
